generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  emailVerified  DateTime?
  username       String          @unique
  passwordHash   String          @map("password_hash")
  createdAt      DateTime        @default(now()) @map("created_at")
  accounts       Account[]
  commentUpvotes CommentUpvote[]
  comments       Comment[]
  postUpvotes    PostUpvote[]
  posts          Post[]
  sessions       Session[]
  hiddenPosts    HiddenPost[]
  favorite       Favorite[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id        String   @id @default(uuid())
  type      PostType @default(DISCUSSION)
  title     String
  content   String?
  url       String?  @unique
  authorId  String   @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  author    User     @relation(fields: [authorId], references: [id])

  comments    Comment[]
  upvotes     PostUpvote[]
  hiddenPosts HiddenPost[]
  favorites   Favorite[]

  @@index([type])
  @@map("posts")
}

model Comment {
  id        String          @id @default(uuid())
  postId    String          @map("post_id")
  authorId  String          @map("author_id")
  content   String
  createdAt DateTime        @default(now()) @map("created_at")
  parentId  String?         @map("parent_id")
  author    User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?        @relation("CommentComments", fields: [parentId], references: [id], onDelete: Cascade)
  post      Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  upvotes   CommentUpvote[]
  comments  Comment[]       @relation("CommentComments")

  @@index([postId])
  @@index([parentId])
  @@map("comments")
}

model PostUpvote {
  id     String @id @default(uuid())
  userId String @map("user_id")
  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_upvotes")
}

model CommentUpvote {
  id        String  @id @default(uuid())
  userId    String? @map("user_id")
  commentId String  @map("comment_id")
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@map("comment_upvotes")
}

model HiddenPost {
  id     String @id @default(uuid())
  userId String @map("user_id")
  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("user_hidden_posts")
}

model Favorite {
  id     String @id @default(uuid())
  userId String @map("user_id")
  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("user_favorites")
}

enum PostType {
  STORY
  DISCUSSION
  ASK
  SHOW
}
