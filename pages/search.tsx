import { CommentsList } from 'components/comments-list';
import { DefaultQueryCell } from 'components/default-query-cell';
import { PostsList } from 'components/posts-list';
import { SearchPageForm } from 'components/search-page-form';
import { trpc } from 'lib/trpc';
import { dehydrateQueries } from 'lib/trpc/dehydrate-queries';
import type { GetServerSideProps, InferGetServerSidePropsType, NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { SearchType, OrderType, searchQuerySchema } from 'server/domains/search/helpers';
import qs from 'query-string';
import { PostRowSimple } from 'components/posts-list/post-row-simple';

const SearchPage: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ page, type, query, order }) => {
  const router = useRouter();
  const searchQuery = trpc.useQuery(['search.query', { page, type, query, order }]);

  return (
    <>
      <Head>
        <title>QuackerNews - Search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <DefaultQueryCell
        query={searchQuery}
        isEmpty={({ data }) => data.results.records.length === 0}
        empty={({ data }) => {
          const { type, query, order } = data;

          return (
            <SearchPageForm searchTerm={query} type={type} order={order}>
              <div className="p-4 ">No results found</div>
            </SearchPageForm>
          );
        }}
        success={({ data }) => {
          const { type, query, order } = data;

          const children = (function () {
            const nextPageUrl =
              data.results.page * data.results.perPage < data.results.totalCount
                ? `/search?${qs.stringify({ ...router.query, type, query, order, page: page + 1 })}`
                : undefined;

            switch (data.type) {
              case SearchType.POST: {
                return (
                  <PostsList posts={data.results.records} nextPageUrl={nextPageUrl} PostRowComponent={PostRowSimple} />
                );
              }

              case SearchType.COMMENT: {
                return <CommentsList comments={data.results.records} nextPageUrl={nextPageUrl} />;
              }
            }
          })();

          return (
            <SearchPageForm searchTerm={query} type={type} order={order}>
              {children}
            </SearchPageForm>
          );
        }}
      />
    </>
  );
};

export const getServerSideProps: GetServerSideProps<{
  page: number;
  query?: string;
  type?: SearchType;
  order?: OrderType;
}> = async ctx => {
  const params = searchQuerySchema.parse({
    page: ctx.query.page,
    type: ctx.query.type,
    query: ctx.query.q,
    order: ctx.query.order,
  });

  return dehydrateQueries(ctx, async ssg => await ssg.fetchQuery('search.query', params), params);
};

export default SearchPage;
