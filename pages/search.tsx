import { CommentsList } from 'components/comments-list';
import { DefaultQueryCell } from 'components/default-query-cell';
import { PostsList } from 'components/posts-list';
import { SearchPageForm } from 'components/search-page-form';
import { trpc } from 'lib/trpc';
import { dehydrateQueries } from 'lib/trpc/dehydrate-queries';
import type { GetServerSideProps, InferGetServerSidePropsType, NextPage } from 'next';
import Head from 'next/head';
import { SearchType, OrderType } from 'server/domains/search/helpers';

const SearchPage: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ page, type, query, order }) => {
  // @TODO: unsubscribe
  const searchQuery = trpc.useQuery([
    'search.query',
    { page, type: type || undefined, query: query || undefined, order: order || undefined },
  ]);

  return (
    <>
      <Head>
        <title>QuackerNews</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <DefaultQueryCell
        query={searchQuery}
        success={({ data }) => {
          const nextPageUrl =
            data.results.page * data.results.perPage < data.results.totalCount
              ? `/search?p=${page + 1}&q=${data.query}`
              : undefined;

          const children = (function () {
            switch (data.type) {
              case SearchType.POST: {
                return <PostsList posts={data.results.posts} nextPageUrl={nextPageUrl} />;
              }

              case SearchType.COMMENT: {
                return <CommentsList comments={data.results.comments} nextPageUrl={nextPageUrl} />;
              }
            }
          })();

          return (
            <SearchPageForm searchTerm={data.query} type={data.type} order={data.order}>
              {children}
            </SearchPageForm>
          );
        }}
      />
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async ctx => {
  const pageParam = parseInt(ctx.query.page as string, 10);
  const page = isNaN(pageParam) ? 1 : pageParam;
  const query = ctx.query.q as string;
  const type = ctx.query.type as SearchType;
  const order = ctx.query.order as OrderType;

  return dehydrateQueries(ctx, async ssg => await ssg.fetchQuery('search.query', { page, query, type, order }), {
    page,
    // @TODO: get a new job
    type: type || null,
    order: order || null,
    query: query || null,
  });
};

export default SearchPage;
